---
# The results are from https://www.dcode.fr/hamming-error-correction
tests:
  default_encode:
    - case: normal single word
      data: F
      expected: 0b1010000011000110
    - case: multi block input
      data: N0
      expected: 0b01100000000010011111110000110000
    - case: empty
      data: 0
      expected: 0b0
  default_decode:
    - case: single word
      data: 0b1010000011000110
      expected: 
        is_pass: True
        decoded: F
        error_bits: [""]
    - case: single word - single error
      data: 0b1010000011100110
      expected:
        is_pass: True
        decoded: F
        error_bits: [10]
    - case: single word - double error
      data: 0b1010000011100111
      expected:
        is_pass: False
        decoded: g
        error_bits: ["CI"]
    - case: single word - parity error
      data: 0b0010000011000110
      expected:
        is_pass: True
        decoded: F
        error_bits: [0]
    - case: single word - three error
      data: 0b1010000011100101
      expected:
        is_pass: True
        decoded: u
        error_bits: [11]
    - case: multiblock - no error
      data: 0b01100000000010011111110000110000
      expected:
        is_pass: True
        decoded: N0
        error_bits: ['', '']
    - case: multiblock - single error
      data: 0b01100000000010011111110000110010
      expected:
        is_pass: True
        decoded: N0
        error_bits: ['', 14]
    - case: multiblock - single error per block
      data: 0b01100100000010011111110000110010
      expected:
        is_pass: True
        decoded: N0
        error_bits: [5,14]
  custom_encode:
    - case: (8, 4) single word
      data: 
        input: F
        size: 8
      expected: 0b1100110001100110
    - case: (256, 247) single word
      data: 
        input: N0B4L!_H4V3_70_M4K3_4_L0N9_MS9
        size: 256
      expected: 0b1010100000000100111100011000001000001000110100010011000010000101001111101001000001101000101011000110011010111110011011100110000011011111010011010011010001001011001100110101111100110100010111110100110000110000010011100011100101011111010011010101001100111001
  custom_decode:
    - case: (8, 4) single word
      data: 
        input: 0b1100110001100110
        size: 8
      expected:
        is_pass: True
        decoded: F
        error_bits: ['', '']
    - case: (8, 4) single word - single block single error
      data:
        input: 0b1100110001101110
        size: 8
      expected:
        is_pass: True
        decoded: F
        error_bits: ['', 4]
    - case: (8, 4) single word - single error per block
      data:
        input: 0b1110110001101110
        size: 8
      expected:
        is_pass: True
        decoded: F
        error_bits: [2, 4]
    - case: (8, 4) single word - single block double error
      data:
        input: 0b1100110001101100
        size: 8
      expected:
        is_pass: False
        decoded: D
        error_bits: ['', 'CI']
    - case: (8, 4) single word - double error per block
      data:
        input: 0b1110010001101100
        size: 8
      expected:
        is_pass: False
        decoded: D
        error_bits: ['CI', 'CI']
    - case: (256, 247) single word
      data:
        input: 0b1010100000000100111100011000001000001000110100010011000010000101001111101001000001101000101011000110011010111110011011100110000011011111010011010011010001001011001100110101111100110100010111110100110000110000010011100011100101011111010011010101001100111001
        size: 256
      expected:
        is_pass: True
        decoded: N0B4L!_H4V3_70_M4K3_4_L0N9_MS9
        error_bits: ['']
  invalid_input:
    - case: block size not 2^n
      data: 30
      expected: "ERROR: block size must be a power of 2 (2^n), 8 >= n >= 3"
    - case: block size too small
      data: 4
      expected: "ERROR: block size must be a power of 2 (2^n), 8 >= n >= 3"
    - case: block size too big
      data: 512
      expected: "ERROR: default block size is too large for hamming code"