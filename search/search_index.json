{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EDAC A Learning Program for Error Decoding and Correction Test Platform NOISE Basic Usage noise_generator = NoiseFactory(NoiseType, debug) noise_msg = noise_generator.add_noise(MSG) Sample Usage noise_generator = NoiseFactory(NoiseType.NO_NOISE, debug=TRUE) noise_msg = noise_generator.add_noise(b\"OUO\")","title":"EDAC"},{"location":"#edac","text":"A Learning Program for Error Decoding and Correction","title":"EDAC"},{"location":"#test-platform","text":"","title":"Test Platform"},{"location":"#noise","text":"","title":"NOISE"},{"location":"#basic-usage","text":"noise_generator = NoiseFactory(NoiseType, debug) noise_msg = noise_generator.add_noise(MSG) Sample Usage noise_generator = NoiseFactory(NoiseType.NO_NOISE, debug=TRUE) noise_msg = noise_generator.add_noise(b\"OUO\")","title":"Basic Usage"},{"location":"lib/noise/noise/","text":"NoiseFactory source NoiseFactory( noise_type: NoiseType, debug: bool = False, **kwargs ) Creates a noise system to add noise to. Args noise_type ( NoiseType ) : The noise type of the given type debug (bool, optional) : The debug flag. Defaults to False. Example >>> noise_system = NoiseFactory(NoiseType.NO_NOISE) >>> noise_system.add_noise(b\"123\") b'123' SeeAlso: NoiseType Methods: .__get_noise_generator source .__get_noise_generator( noise_type: NoiseType ) Get the noise system of the given noise type Args noise_type ( NoiseType ) : the givin noise type seealso: noise.shceme.NoiseType Raises ValueError : No noise type found Returns NoiseMethod : the noise system .add_noise source .add_noise( data: bytes ) Add noise to the data Args data (bytes) : data to add noise on Raises ValueError : data's type is not bytes Returns bytes : the data with the noise","title":"Noise"},{"location":"lib/noise/noise/#_1","text":"","title":""},{"location":"lib/noise/noise/#noisefactory","text":"source NoiseFactory( noise_type: NoiseType, debug: bool = False, **kwargs ) Creates a noise system to add noise to. Args noise_type ( NoiseType ) : The noise type of the given type debug (bool, optional) : The debug flag. Defaults to False. Example >>> noise_system = NoiseFactory(NoiseType.NO_NOISE) >>> noise_system.add_noise(b\"123\") b'123' SeeAlso: NoiseType Methods:","title":"NoiseFactory"},{"location":"lib/noise/noise/#__get_noise_generator","text":"source .__get_noise_generator( noise_type: NoiseType ) Get the noise system of the given noise type Args noise_type ( NoiseType ) : the givin noise type seealso: noise.shceme.NoiseType Raises ValueError : No noise type found Returns NoiseMethod : the noise system","title":".__get_noise_generator"},{"location":"lib/noise/noise/#add_noise","text":"source .add_noise( data: bytes ) Add noise to the data Args data (bytes) : data to add noise on Raises ValueError : data's type is not bytes Returns bytes : the data with the noise","title":".add_noise"},{"location":"lib/noise/scheme/","text":"NoiseType source NoiseType() The Noise type Enumerate of the Noise system Attributes NO_NOISE (A system with no Noise) : see also NO_NOISE BIT_FLIP (A system that flip bits) : see also BIT_FLIP NoiseMethod source NoiseMethod( noise_type: NoiseType = NoiseType.NO_NOISE, debug: bool = False ) The Base class fo the Noise Method Args TYPE (NoiseType) : The type of noise system DEBUG (bool) : Debug Flag Note This is the abstract base class, add_noise method should never be called Methods: .add_noise source .add_noise( data: bytes ) Add the noise to the data from the noise system Args data (bytes) : the data that the noise is going to add on Returns bytes : the data with the noise","title":"Scheme"},{"location":"lib/noise/scheme/#_1","text":"","title":""},{"location":"lib/noise/scheme/#noisetype","text":"source NoiseType() The Noise type Enumerate of the Noise system Attributes NO_NOISE (A system with no Noise) : see also NO_NOISE BIT_FLIP (A system that flip bits) : see also BIT_FLIP","title":"NoiseType"},{"location":"lib/noise/scheme/#noisemethod","text":"source NoiseMethod( noise_type: NoiseType = NoiseType.NO_NOISE, debug: bool = False ) The Base class fo the Noise Method Args TYPE (NoiseType) : The type of noise system DEBUG (bool) : Debug Flag Note This is the abstract base class, add_noise method should never be called Methods:","title":"NoiseMethod"},{"location":"lib/noise/scheme/#add_noise","text":"source .add_noise( data: bytes ) Add the noise to the data from the noise system Args data (bytes) : the data that the noise is going to add on Returns bytes : the data with the noise","title":".add_noise"},{"location":"lib/noise/systems/BIT_FLIP/","text":"BitFlipNoise source BitFlipNoise( debug: bool, kwargs: dict = None ) Add the Bit Flip Noise System to the data Args debug (bool) : the debug flag kwargs (optional) : The key word argument passed from Noise Factory . Defaults to None. should contain key flip_list flip_list (list[int]) : A list of integer index that defines the bit index that should be flipped Note the **kwargs should be flip_list (list[int]) , if no such key in **kwargs it will auto flips a random bit Example >>> from lib.noise.scheme import NoiseType >>> noise_system = NoiseFactory(NoiseType.BIT_FLIP, flip_list=[6]) >>> noise_system.add_noise(b'OUO') b'MUO' >>> noise_system.add_noise(b'OUO') b'MUO' >>> noise_system = NoiseFactory(NoiseType.BIT_FLIP) >>> noise_system.add_noise(b'OUO') b'OuO' >>> noise_system.add_noise(b'OUO') b'O\u00d5O' Methods: .__add_noise source .__add_noise( data: bytes ) The method to add noise Args data (bytes) : The data to add noise at Returns bytes : the data with the noise Note The algorithm of this method is using a xor mask to flip the data , since x ^ 0 = x, x ^ 1 = !x Given an example | 0 | 1 | 2 | 3 | 4 | | 1 | 0 | 1 | 1 | 0 | --------------------- XOR | 0 | 0 | 1 | 0 | 1 | --------------------- Results | 1 | 0 |*0*| 1 |*1*| You can see that except the 2^{nd} and the 4^{th} data, the data remains the same. .add_noise source .add_noise( data: bytes ) Validate the flip_list and add the noise to the data Args data (bytes) : The data to be noise added Raises IndexError : the flip_list contains integers that exceeds the length of the original data Returns bytes : the data with the noise","title":"BIT FLIP"},{"location":"lib/noise/systems/BIT_FLIP/#_1","text":"","title":""},{"location":"lib/noise/systems/BIT_FLIP/#bitflipnoise","text":"source BitFlipNoise( debug: bool, kwargs: dict = None ) Add the Bit Flip Noise System to the data Args debug (bool) : the debug flag kwargs (optional) : The key word argument passed from Noise Factory . Defaults to None. should contain key flip_list flip_list (list[int]) : A list of integer index that defines the bit index that should be flipped Note the **kwargs should be flip_list (list[int]) , if no such key in **kwargs it will auto flips a random bit Example >>> from lib.noise.scheme import NoiseType >>> noise_system = NoiseFactory(NoiseType.BIT_FLIP, flip_list=[6]) >>> noise_system.add_noise(b'OUO') b'MUO' >>> noise_system.add_noise(b'OUO') b'MUO' >>> noise_system = NoiseFactory(NoiseType.BIT_FLIP) >>> noise_system.add_noise(b'OUO') b'OuO' >>> noise_system.add_noise(b'OUO') b'O\u00d5O' Methods:","title":"BitFlipNoise"},{"location":"lib/noise/systems/BIT_FLIP/#__add_noise","text":"source .__add_noise( data: bytes ) The method to add noise Args data (bytes) : The data to add noise at Returns bytes : the data with the noise Note The algorithm of this method is using a xor mask to flip the data , since x ^ 0 = x, x ^ 1 = !x Given an example | 0 | 1 | 2 | 3 | 4 | | 1 | 0 | 1 | 1 | 0 | --------------------- XOR | 0 | 0 | 1 | 0 | 1 | --------------------- Results | 1 | 0 |*0*| 1 |*1*| You can see that except the 2^{nd} and the 4^{th} data, the data remains the same.","title":".__add_noise"},{"location":"lib/noise/systems/BIT_FLIP/#add_noise","text":"source .add_noise( data: bytes ) Validate the flip_list and add the noise to the data Args data (bytes) : The data to be noise added Raises IndexError : the flip_list contains integers that exceeds the length of the original data Returns bytes : the data with the noise","title":".add_noise"},{"location":"lib/noise/systems/NO_NOISE/","text":"NoNoise source NoNoise( debug: bool ) A Noise system without any noise Args debug (bool) : the debug flag Methods: .add_noise source .add_noise( data: bytes ) The Method of adding noise to the data Args data (bytes) : the data that is going to add noise on Returns bytes : the data with noise","title":"NO NOISE"},{"location":"lib/noise/systems/NO_NOISE/#_1","text":"","title":""},{"location":"lib/noise/systems/NO_NOISE/#nonoise","text":"source NoNoise( debug: bool ) A Noise system without any noise Args debug (bool) : the debug flag Methods:","title":"NoNoise"},{"location":"lib/noise/systems/NO_NOISE/#add_noise","text":"source .add_noise( data: bytes ) The Method of adding noise to the data Args data (bytes) : the data that is going to add noise on Returns bytes : the data with noise","title":".add_noise"}]}